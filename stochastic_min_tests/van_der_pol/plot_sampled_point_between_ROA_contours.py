import numpy as np
import matplotlib.pyplot as plt
import torch
import torchsde
import time

# ====================
# 1. Define grid and contour lines
x1 = np.linspace(-3.5, 3.5, 1000)
x2 = np.linspace(-4, 4, 1400)
X1, X2 = np.meshgrid(x1, x2)

# Define V_nn, which obtained from pinn_van_der_pol.py
V_nn = (0.26237118244171143 
        - 0.50079739093780518 * np.tanh(
            -1.0827794075012207 
            + 0.61921948194503784 * np.tanh(-1.4793460369110107 - 0.21052105724811554 * X1 - 0.27372744679450989 * X2)
            + 0.093209430575370789 * np.tanh(-0.98550295829772949 - 0.5785408616065979 * X1 - 0.59877216815948486 * X2)
            - 0.21036335825920105 * np.tanh(-0.94563972949981689 + 0.02181905135512352 * X1 + 0.68701893091201782 * X2)
            - 0.42979258298873901 * np.tanh(-0.83348357677459717 - 0.8212505578994751 * X1 + 0.13336376845836639 * X2)
            - 0.653034508228302   * np.tanh(0.017041947692632675 - 0.090094991028308868 * X1 + 0.082341447472572327 * X2)
            - 0.27258405089378357 * np.tanh(0.78042000532150269 - 0.43576517701148987 * X1 + 0.068176165223121643 * X2)
            - 0.46359387040138245 * np.tanh(0.83026278018951416 - 0.32804307341575623 * X1 - 1.8717272281646729 * X2)
            - 0.13065941631793976 * np.tanh(1.0298995971679688 - 0.51479923725128174 * X1 + 0.4556383490562439 * X2)
            + 0.28891336917877197 * np.tanh(1.450109601020813 - 1.1933362483978271 * X1 + 0.0029149351175874472 * X2)
            + 0.23937921226024628 * np.tanh(1.6685527563095093 - 0.2964826226234436 * X1 + 1.1064096689224243 * X2)
          )
        - 0.0867595374584198 * np.tanh(
            -0.4064633846282959 
            + 0.096659004688262939 * np.tanh(-1.4793460369110107 - 0.21052105724811554 * X1 - 0.27372744679450989 * X2)
            - 0.3074297308921814 * np.tanh(-0.98550295829772949 - 0.5785408616065979 * X1 - 0.59877216815948486 * X2)
            - 0.4940744936466217 * np.tanh(-0.94563972949981689 + 0.02181905135512352 * X1 + 0.68701893091201782 * X2)
            - 0.028568394482135773 * np.tanh(-0.83348357677459717 - 0.8212505578994751 * X1 + 0.13336376845836639 * X2)
            - 0.32893145084381104 * np.tanh(0.017041947692632675 - 0.090094991028308868 * X1 + 0.082341447472572327 * X2)
            + 0.51525872945785522 * np.tanh(0.78042000532150269 - 0.43576517701148987 * X1 + 0.068176165223121643 * X2)
            + 0.12918098270893097 * np.tanh(0.83026278018951416 - 0.32804307341575623 * X1 - 1.8717272281646729 * X2)
            + 0.1678309291601181  * np.tanh(1.0298995971679688 - 0.51479923725128174 * X1 + 0.4556383490562439 * X2)
            + 0.31917354464530945 * np.tanh(1.450109601020813 - 1.1933362483978271 * X1 + 0.0029149351175874472 * X2)
            - 0.087243638932704926 * np.tanh(1.6685527563095093 - 0.2964826226234436 * X1 + 1.1064096689224243 * X2)
          )
        - 0.24912264943122864 * np.tanh(
            -0.34233087301254272 
            - 0.23425647616386414 * np.tanh(-1.4793460369110107 - 0.21052105724811554 * X1 - 0.27372744679450989 * X2)
            + 0.61982882022857666 * np.tanh(-0.98550295829772949 - 0.5785408616065979 * X1 - 0.59877216815948486 * X2)
            + 0.65163666009902954 * np.tanh(-0.94563972949981689 + 0.02181905135512352 * X1 + 0.68701893091201782 * X2)
            - 0.32302224636077881 * np.tanh(-0.83348357677459717 - 0.8212505578994751 * X1 + 0.13336376845836639 * X2)
            + 0.23185090720653534 * np.tanh(0.017041947692632675 - 0.090094991028308868 * X1 + 0.082341447472572327 * X2)
            - 0.23470671474933624 * np.tanh(0.78042000532150269 - 0.43576517701148987 * X1 + 0.068176165223121643 * X2)
            - 0.36189574003219604 * np.tanh(0.83026278018951416 - 0.32804307341575623 * X1 - 1.8717272281646729 * X2)
            + 0.5831952691078186  * np.tanh(1.0298995971679688 - 0.51479923725128174 * X1 + 0.4556383490562439 * X2)
            + 0.64402425289154053 * np.tanh(1.450109601020813 - 1.1933362483978271 * X1 + 0.0029149351175874472 * X2)
            + 0.71212315559387207 * np.tanh(1.6685527563095093 - 0.2964826226234436 * X1 + 1.1064096689224243 * X2)
          )
        - 0.50970333814620972 * np.tanh(
            -0.30995723605155945 
            + 0.2246941477060318 * np.tanh(-1.4793460369110107 - 0.21052105724811554 * X1 - 0.27372744679450989 * X2)
            - 0.44600275158882141 * np.tanh(-0.98550295829772949 - 0.5785408616065979 * X1 - 0.59877216815948486 * X2)
            - 1.0932924747467041 * np.tanh(-0.94563972949981689 + 0.02181905135512352 * X1 + 0.68701893091201782 * X2)
            - 1.3093807697296143 * np.tanh(-0.83348357677459717 - 0.8212505578994751 * X1 + 0.13336376845836639 * X2)
            - 0.49040022492408752 * np.tanh(0.017041947692632675 - 0.090094991028308868 * X1 + 0.082341447472572327 * X2)
            - 0.37872684001922607 * np.tanh(0.78042000532150269 - 0.43576517701148987 * X1 + 0.068176165223121643 * X2)
            + 0.072051189839839935 * np.tanh(0.83026278018951416 - 0.32804307341575623 * X1 - 1.8717272281646729 * X2)
            + 0.26853534579277039 * np.tanh(1.0298995971679688 - 0.51479923725128174 * X1 + 0.4556383490562439 * X2)
            - 0.46880859136581421 * np.tanh(1.450109601020813 - 1.1933362483978271 * X1 + 0.0029149351175874472 * X2)
            + 0.39468491077423096 * np.tanh(1.6685527563095093 - 0.2964826226234436 * X1 + 1.1064096689224243 * X2)
          )
        - 0.28724205493927002 * np.tanh(
            -0.14164865016937256 
            + 0.74304288625717163 * np.tanh(-1.4793460369110107 - 0.21052105724811554 * X1 - 0.27372744679450989 * X2)
            - 0.093650601804256439 * np.tanh(-0.98550295829772949 - 0.5785408616065979 * X1 - 0.59877216815948486 * X2)
            + 0.72398912906646729 * np.tanh(-0.94563972949981689 + 0.02181905135512352 * X1 + 0.68701893091201782 * X2)
            + 1.0409743785858154 * np.tanh(-0.83348357677459717 - 0.8212505578994751 * X1 + 0.13336376845836639 * X2)
            + 0.23381903767585754 * np.tanh(0.017041947692632675 - 0.090094991028308868 * X1 + 0.082341447472572327 * X2)
            + 0.16872851550579071 * np.tanh(0.78042000532150269 - 0.43576517701148987 * X1 + 0.068176165223121643 * X2)
            + 0.12475875020027161 * np.tanh(0.83026278018951416 - 0.32804307341575623 * X1 - 1.8717272281646729 * X2)
            + 0.30125564336776733 * np.tanh(1.0298995971679688 - 0.51479923725128174 * X1 + 0.4556383490562439 * X2)
            + 0.47119581699371338 * np.tanh(1.450109601020813 - 1.1933362483978271 * X1 + 0.0029149351175874472 * X2)
            - 0.14958281815052032 * np.tanh(1.6685527563095093 - 0.2964826226234436 * X1 + 1.1064096689224243 * X2)
          )
        + 0.11054860800504684 * np.tanh(
            -0.096006877720355988 
            + 0.67572176456451416 * np.tanh(-1.4793460369110107 - 0.21052105724811554 * X1 - 0.27372744679450989 * X2)
            - 0.38921377062797546 * np.tanh(-0.98550295829772949 - 0.5785408616065979 * X1 - 0.59877216815948486 * X2)
            - 1.5310935974121094 * np.tanh(-0.94563972949981689 + 0.02181905135512352 * X1 + 0.68701893091201782 * X2)
            - 0.23653885722160339 * np.tanh(-0.83348357677459717 - 0.8212505578994751 * X1 + 0.13336376845836639 * X2)
            - 0.53200393915176392 * np.tanh(0.017041947692632675 - 0.090094991028308868 * X1 + 0.082341447472572327 * X2)
            + 0.59750264883041382 * np.tanh(0.78042000532150269 - 0.43576517701148987 * X1 + 0.068176165223121643 * X2)
            + 0.57349151372909546 * np.tanh(0.83026278018951416 - 0.32804307341575623 * X1 - 1.8717272281646729 * X2)
            + 0.61700457334518433 * np.tanh(1.0298995971679688 - 0.51479923725128174 * X1 + 0.4556383490562439 * X2)
            + 0.44175919890403748 * np.tanh(1.450109601020813 - 1.1933362483978271 * X1 + 0.0029149351175874472 * X2)
            - 1.554986834526062   * np.tanh(1.6685527563095093 - 0.2964826226234436 * X1 + 1.1064096689224243 * X2)
          )
        + 0.44664016366004944 * np.tanh(
            0.099953703582286835 
            - 0.22909188270568848 * np.tanh(-1.4793460369110107 - 0.21052105724811554 * X1 - 0.27372744679450989 * X2)
            - 0.5247994065284729 * np.tanh(-0.98550295829772949 - 0.5785408616065979 * X1 - 0.59877216815948486 * X2)
            + 0.49363401532173157 * np.tanh(-0.94563972949981689 + 0.02181905135512352 * X1 + 0.68701893091201782 * X2)
            - 0.55830740928649902 * np.tanh(-0.83348357677459717 - 0.8212505578994751 * X1 + 0.13336376845836639 * X2)
            - 0.35464167594909668 * np.tanh(0.017041947692632675 - 0.090094991028308868 * X1 + 0.082341447472572327 * X2)
            - 0.54985737800598145 * np.tanh(0.78042000532150269 - 0.43576517701148987 * X1 + 0.068176165223121643 * X2)
            - 0.44777429103851318 * np.tanh(0.83026278018951416 - 0.32804307341575623 * X1 - 1.8717272281646729 * X2)
            - 0.61867767572402954 * np.tanh(1.0298995971679688 - 0.51479923725128174 * X1 + 0.4556383490562439 * X2)
            - 0.13462585210800171 * np.tanh(1.450109601020813 - 1.1933362483978271 * X1 + 0.0029149351175874472 * X2)
            - 1.038992166519165   * np.tanh(1.6685527563095093 - 0.2964826226234436 * X1 + 1.1064096689224243 * X2)
          )
        + 0.31676885485649109 * np.tanh(
            0.29953297972679138 
            + 0.11513504385948181 * np.tanh(-1.4793460369110107 - 0.21052105724811554 * X1 - 0.27372744679450989 * X2)
            - 0.061506006866693497 * np.tanh(-0.98550295829772949 - 0.5785408616065979 * X1 - 0.59877216815948486 * X2)
            + 0.25348550081253052 * np.tanh(-0.94563972949981689 + 0.02181905135512352 * X1 + 0.68701893091201782 * X2)
            - 0.38706371188163757 * np.tanh(-0.83348357677459717 - 0.8212505578994751 * X1 + 0.13336376845836639 * X2)
            - 0.064383916556835175 * np.tanh(0.017041947692632675 - 0.090094991028308868 * X1 + 0.082341447472572327 * X2)
            + 0.10233032703399658 * np.tanh(0.78042000532150269 - 0.43576517701148987 * X1 + 0.068176165223121643 * X2)
            - 0.23956821858882904 * np.tanh(0.83026278018951416 - 0.32804307341575623 * X1 - 1.8717272281646729 * X2)
            + 0.088837295770645142 * np.tanh(1.0298995971679688 - 0.51479923725128174 * X1 + 0.4556383490562439 * X2)
            + 0.36619627475738525 * np.tanh(1.450109601020813 - 1.1933362483978271 * X1 + 0.0029149351175874472 * X2)
            + 0.70937550067901611 * np.tanh(1.6685527563095093 - 0.2964826226234436 * X1 + 1.1064096689224243 * X2)
          )
        + 0.26497375965118408 * np.tanh(
            0.73424834012985229 
            - 0.004535985179245472 * np.tanh(-1.4793460369110107 - 0.21052105724811554 * X1 - 0.27372744679450989 * X2)
            + 1.3651849031448364 * np.tanh(-0.98550295829772949 - 0.5785408616065979 * X1 - 0.59877216815948486 * X2)
            + 1.0212399959564209 * np.tanh(-0.94563972949981689 + 0.02181905135512352 * X1 + 0.68701893091201782 * X2)
            + 1.1655539274215698 * np.tanh(-0.83348357677459717 - 0.8212505578994751 * X1 + 0.13336376845836639 * X2)
            + 0.012068412266671658 * np.tanh(0.017041947692632675 - 0.090094991028308868 * X1 + 0.082341447472572327 * X2)
            + 1.0592633485794067 * np.tanh(0.78042000532150269 - 0.43576517701148987 * X1 + 0.068176165223121643 * X2)
            - 1.0534647703170776 * np.tanh(0.83026278018951416 - 0.32804307341575623 * X1 - 1.8717272281646729 * X2)
            - 0.042276788502931595 * np.tanh(1.0298995971679688 - 0.51479923725128174 * X1 + 0.4556383490562439 * X2)
            - 1.1845817565917969 * np.tanh(1.450109601020813 - 1.1933362483978271 * X1 + 0.0029149351175874472 * X2)
            - 0.022373588755726814 * np.tanh(1.6685527563095093 - 0.2964826226234436 * X1 + 1.1064096689224243 * X2)
          )
        + 0.24966247379779816 * np.tanh(
            0.86275207996368408 
            - 0.079777687788009644 * np.tanh(-1.4793460369110107 - 0.21052105724811554 * X1 - 0.27372744679450989 * X2)
            + 0.15378162264823914 * np.tanh(-0.98550295829772949 - 0.5785408616065979 * X1 - 0.59877216815948486 * X2)
            - 0.74858522415161133 * np.tanh(-0.94563972949981689 + 0.02181905135512352 * X1 + 0.68701893091201782 * X2)
            + 0.71782541275024414 * np.tanh(-0.83348357677459717 - 0.8212505578994751 * X1 + 0.13336376845836639 * X2)
            - 0.41732850670814514 * np.tanh(0.017041947692632675 - 0.090094991028308868 * X1 + 0.082341447472572327 * X2)
            + 0.4468209445476532 * np.tanh(0.78042000532150269 - 0.43576517701148987 * X1 + 0.068176165223121643 * X2)
            - 0.69073379039764404 * np.tanh(0.83026278018951416 - 0.32804307341575623 * X1 - 1.8717272281646729 * X2)
            - 0.13008217513561249 * np.tanh(1.0298995971679688 - 0.51479923725128174 * X1 + 0.4556383490562439 * X2)
            - 0.25244593620300293 * np.tanh(1.450109601020813 - 1.1933362483978271 * X1 + 0.0029149351175874472 * X2)
            - 0.49587270617485046 * np.tanh(1.6685527563095093 - 0.2964826226234436 * X1 + 1.1064096689224243 * X2)
          )
       )
# Define V_deterministic, which characterized the largest verified ROA for determinitic system.
V_deterministic = (-1.05929005927e-06 * X1 
     - 2.71677633361e-05 * X2 
     + 0.397347476972 * X1**2 
     + 0.000156264012021 * X1**2 * X2 
     - 0.30772805158 * X1 * X2 
     + 0.262235099124 * X2**2 
     + 0.0498772927599 * X1**3 * X2 
     + 0.0235593200367 * X1**2 * X2**2 
     + 1.28543672136e-05 * X1**3 
     + 6.29651647489e-05 * X1 * X2**2 
     - 8.63359761691e-05 * X2**3 
     - 0.0721896892909 * X1**4 
     - 0.00528024130769 * X1 * X2**3 
     - 0.0120203122215 * X2**4 
     - 1.53832026606e-05 * X1**5 
     - 6.6315799942e-05 * X1**4 * X2 
     - 1.49177796319e-05 * X1**3 * X2**2 
     + 2.69166169067e-05 * X1**2 * X2**3 
     - 2.80311502925e-05 * X1 * X2**4 
     + 1.52476083606e-05 * X2**5 
     + 0.00939644333733 * X1**6 
     + 0.00758412958715 * X1**5 * X2 
     - 0.00568891267933 * X1**4 * X2**2 
     - 0.0046212345166  * X1**3 * X2**3 
     + 0.00333829700064 * X1**2 * X2**4 
     - 0.00149810028984 * X1 * X2**5 
     + 0.0006771386663  * X2**6)

# Parameters
level_w2 = 0.864379
level_SOS = 1

import matplotlib.pyplot as plt
import matplotlib.lines as mlines
import numpy as np
from scipy.spatial import cKDTree

# Creat figure and legend
fig, ax = plt.subplots(figsize=(8, 6))

# Plot contours
cs3 = ax.contour(X1, X2, V_nn, levels=[level_w2], colors='g', linewidths=1.5)
cs6 = ax.contour(X1, X2, V_deterministic, levels=[level_SOS], colors='r', linewidths=2)

# Creat legend
proxy_green = mlines.Line2D([], [], color='g', linewidth=1.5, label='Probabilistic ROA')
proxy_red   = mlines.Line2D([], [], color='r', linewidth=2,   label='ROA')

paths = cs3.collections[0].get_paths()
if len(paths) > 0:
    contour_points = paths[0].vertices  # (N, 2) array
else:
    raise ValueError("No path found in the contour.")

# ----------------------------
data = np.load('limit_cycle.npy')
print("data shape:", data.shape)
data_points = np.vstack((data[0, :], data[1, :])).T  #  (N, 2) array

# Plot limit cycle
line_data, = ax.plot(data_points[:, 0], data_points[:, 1], 'b', markersize=2, label='Limit Cycle')

# -------------- Plot the sampled point between the ROA and probabilistic ROA --------------
tree = cKDTree(contour_points)
dist, indices = tree.query(data_points)
nearest_contour_points = contour_points[indices]  # Each data point corresponds to the nearest contour point

# # Use interpolation to compute the midpoint.
# s=0.1 means the point is closer to the contour line than the other reference point.
s = 0.1
midpoints = s * data_points + (1 - s) * nearest_contour_points
N_target = 1  # number of sample point
pts_inside = np.array(midpoints[:N_target])
print(pts_inside)

# Plot the sampled point
point_sample, = ax.plot(pts_inside[:, 0], pts_inside[:, 1], 'k.', markersize=4, label='Sampled Point')

ax.set_xlabel('x1', fontsize=30)
ax.set_ylabel('x2', fontsize=30)
ax.set_title('Sampled Point Between ROA Contours', fontsize=30)
ax.xaxis.set_tick_params(labelsize=14)  
ax.yaxis.set_tick_params(labelsize=14)
handles = [proxy_green, proxy_red, line_data, point_sample]
ax.legend(handles=handles,loc='upper left', fontsize=16)
# ax.grid(True)
plt.tight_layout()
plt.savefig('sampled_point_between_ROA_contours.pdf', format='pdf',dpi=300)
plt.show()

