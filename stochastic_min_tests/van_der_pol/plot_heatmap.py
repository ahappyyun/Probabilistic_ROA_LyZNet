import numpy as np
import matplotlib.pyplot as plt

# Define grid
x1 = np.linspace(-3.5, 3.5, 1000)
x2 = np.linspace(-4, 4, 1400)
X1, X2 = np.meshgrid(x1, x2)

# Define V_quadratic, which can get from the pinn_van_der_pol.py
V_quadratic = -1.56098 * (X1 * X2) + 2.2439 * (X1 ** 2) + 1.46341 * (X2 ** 2)

# Define V_nn, which can get from the pinn_van_der_pol.py
V_nn = (0.26237118244171143 
        - 0.50079739093780518 * np.tanh(
            -1.0827794075012207 
            + 0.61921948194503784 * np.tanh(-1.4793460369110107 - 0.21052105724811554 * X1 - 0.27372744679450989 * X2)
            + 0.093209430575370789 * np.tanh(-0.98550295829772949 - 0.5785408616065979 * X1 - 0.59877216815948486 * X2)
            - 0.21036335825920105 * np.tanh(-0.94563972949981689 + 0.02181905135512352 * X1 + 0.68701893091201782 * X2)
            - 0.42979258298873901 * np.tanh(-0.83348357677459717 - 0.8212505578994751 * X1 + 0.13336376845836639 * X2)
            - 0.653034508228302   * np.tanh(0.017041947692632675 - 0.090094991028308868 * X1 + 0.082341447472572327 * X2)
            - 0.27258405089378357 * np.tanh(0.78042000532150269 - 0.43576517701148987 * X1 + 0.068176165223121643 * X2)
            - 0.46359387040138245 * np.tanh(0.83026278018951416 - 0.32804307341575623 * X1 - 1.8717272281646729 * X2)
            - 0.13065941631793976 * np.tanh(1.0298995971679688 - 0.51479923725128174 * X1 + 0.4556383490562439 * X2)
            + 0.28891336917877197 * np.tanh(1.450109601020813 - 1.1933362483978271 * X1 + 0.0029149351175874472 * X2)
            + 0.23937921226024628 * np.tanh(1.6685527563095093 - 0.2964826226234436 * X1 + 1.1064096689224243 * X2)
          )
        - 0.0867595374584198 * np.tanh(
            -0.4064633846282959 
            + 0.096659004688262939 * np.tanh(-1.4793460369110107 - 0.21052105724811554 * X1 - 0.27372744679450989 * X2)
            - 0.3074297308921814 * np.tanh(-0.98550295829772949 - 0.5785408616065979 * X1 - 0.59877216815948486 * X2)
            - 0.4940744936466217 * np.tanh(-0.94563972949981689 + 0.02181905135512352 * X1 + 0.68701893091201782 * X2)
            - 0.028568394482135773 * np.tanh(-0.83348357677459717 - 0.8212505578994751 * X1 + 0.13336376845836639 * X2)
            - 0.32893145084381104 * np.tanh(0.017041947692632675 - 0.090094991028308868 * X1 + 0.082341447472572327 * X2)
            + 0.51525872945785522 * np.tanh(0.78042000532150269 - 0.43576517701148987 * X1 + 0.068176165223121643 * X2)
            + 0.12918098270893097 * np.tanh(0.83026278018951416 - 0.32804307341575623 * X1 - 1.8717272281646729 * X2)
            + 0.1678309291601181  * np.tanh(1.0298995971679688 - 0.51479923725128174 * X1 + 0.4556383490562439 * X2)
            + 0.31917354464530945 * np.tanh(1.450109601020813 - 1.1933362483978271 * X1 + 0.0029149351175874472 * X2)
            - 0.087243638932704926 * np.tanh(1.6685527563095093 - 0.2964826226234436 * X1 + 1.1064096689224243 * X2)
          )
        - 0.24912264943122864 * np.tanh(
            -0.34233087301254272 
            - 0.23425647616386414 * np.tanh(-1.4793460369110107 - 0.21052105724811554 * X1 - 0.27372744679450989 * X2)
            + 0.61982882022857666 * np.tanh(-0.98550295829772949 - 0.5785408616065979 * X1 - 0.59877216815948486 * X2)
            + 0.65163666009902954 * np.tanh(-0.94563972949981689 + 0.02181905135512352 * X1 + 0.68701893091201782 * X2)
            - 0.32302224636077881 * np.tanh(-0.83348357677459717 - 0.8212505578994751 * X1 + 0.13336376845836639 * X2)
            + 0.23185090720653534 * np.tanh(0.017041947692632675 - 0.090094991028308868 * X1 + 0.082341447472572327 * X2)
            - 0.23470671474933624 * np.tanh(0.78042000532150269 - 0.43576517701148987 * X1 + 0.068176165223121643 * X2)
            - 0.36189574003219604 * np.tanh(0.83026278018951416 - 0.32804307341575623 * X1 - 1.8717272281646729 * X2)
            + 0.5831952691078186  * np.tanh(1.0298995971679688 - 0.51479923725128174 * X1 + 0.4556383490562439 * X2)
            + 0.64402425289154053 * np.tanh(1.450109601020813 - 1.1933362483978271 * X1 + 0.0029149351175874472 * X2)
            + 0.71212315559387207 * np.tanh(1.6685527563095093 - 0.2964826226234436 * X1 + 1.1064096689224243 * X2)
          )
        - 0.50970333814620972 * np.tanh(
            -0.30995723605155945 
            + 0.2246941477060318 * np.tanh(-1.4793460369110107 - 0.21052105724811554 * X1 - 0.27372744679450989 * X2)
            - 0.44600275158882141 * np.tanh(-0.98550295829772949 - 0.5785408616065979 * X1 - 0.59877216815948486 * X2)
            - 1.0932924747467041 * np.tanh(-0.94563972949981689 + 0.02181905135512352 * X1 + 0.68701893091201782 * X2)
            - 1.3093807697296143 * np.tanh(-0.83348357677459717 - 0.8212505578994751 * X1 + 0.13336376845836639 * X2)
            - 0.49040022492408752 * np.tanh(0.017041947692632675 - 0.090094991028308868 * X1 + 0.082341447472572327 * X2)
            - 0.37872684001922607 * np.tanh(0.78042000532150269 - 0.43576517701148987 * X1 + 0.068176165223121643 * X2)
            + 0.072051189839839935 * np.tanh(0.83026278018951416 - 0.32804307341575623 * X1 - 1.8717272281646729 * X2)
            + 0.26853534579277039 * np.tanh(1.0298995971679688 - 0.51479923725128174 * X1 + 0.4556383490562439 * X2)
            - 0.46880859136581421 * np.tanh(1.450109601020813 - 1.1933362483978271 * X1 + 0.0029149351175874472 * X2)
            + 0.39468491077423096 * np.tanh(1.6685527563095093 - 0.2964826226234436 * X1 + 1.1064096689224243 * X2)
          )
        - 0.28724205493927002 * np.tanh(
            -0.14164865016937256 
            + 0.74304288625717163 * np.tanh(-1.4793460369110107 - 0.21052105724811554 * X1 - 0.27372744679450989 * X2)
            - 0.093650601804256439 * np.tanh(-0.98550295829772949 - 0.5785408616065979 * X1 - 0.59877216815948486 * X2)
            + 0.72398912906646729 * np.tanh(-0.94563972949981689 + 0.02181905135512352 * X1 + 0.68701893091201782 * X2)
            + 1.0409743785858154 * np.tanh(-0.83348357677459717 - 0.8212505578994751 * X1 + 0.13336376845836639 * X2)
            + 0.23381903767585754 * np.tanh(0.017041947692632675 - 0.090094991028308868 * X1 + 0.082341447472572327 * X2)
            + 0.16872851550579071 * np.tanh(0.78042000532150269 - 0.43576517701148987 * X1 + 0.068176165223121643 * X2)
            + 0.12475875020027161 * np.tanh(0.83026278018951416 - 0.32804307341575623 * X1 - 1.8717272281646729 * X2)
            + 0.30125564336776733 * np.tanh(1.0298995971679688 - 0.51479923725128174 * X1 + 0.4556383490562439 * X2)
            + 0.47119581699371338 * np.tanh(1.450109601020813 - 1.1933362483978271 * X1 + 0.0029149351175874472 * X2)
            - 0.14958281815052032 * np.tanh(1.6685527563095093 - 0.2964826226234436 * X1 + 1.1064096689224243 * X2)
          )
        + 0.11054860800504684 * np.tanh(
            -0.096006877720355988 
            + 0.67572176456451416 * np.tanh(-1.4793460369110107 - 0.21052105724811554 * X1 - 0.27372744679450989 * X2)
            - 0.38921377062797546 * np.tanh(-0.98550295829772949 - 0.5785408616065979 * X1 - 0.59877216815948486 * X2)
            - 1.5310935974121094 * np.tanh(-0.94563972949981689 + 0.02181905135512352 * X1 + 0.68701893091201782 * X2)
            - 0.23653885722160339 * np.tanh(-0.83348357677459717 - 0.8212505578994751 * X1 + 0.13336376845836639 * X2)
            - 0.53200393915176392 * np.tanh(0.017041947692632675 - 0.090094991028308868 * X1 + 0.082341447472572327 * X2)
            + 0.59750264883041382 * np.tanh(0.78042000532150269 - 0.43576517701148987 * X1 + 0.068176165223121643 * X2)
            + 0.57349151372909546 * np.tanh(0.83026278018951416 - 0.32804307341575623 * X1 - 1.8717272281646729 * X2)
            + 0.61700457334518433 * np.tanh(1.0298995971679688 - 0.51479923725128174 * X1 + 0.4556383490562439 * X2)
            + 0.44175919890403748 * np.tanh(1.450109601020813 - 1.1933362483978271 * X1 + 0.0029149351175874472 * X2)
            - 1.554986834526062   * np.tanh(1.6685527563095093 - 0.2964826226234436 * X1 + 1.1064096689224243 * X2)
          )
        + 0.44664016366004944 * np.tanh(
            0.099953703582286835 
            - 0.22909188270568848 * np.tanh(-1.4793460369110107 - 0.21052105724811554 * X1 - 0.27372744679450989 * X2)
            - 0.5247994065284729 * np.tanh(-0.98550295829772949 - 0.5785408616065979 * X1 - 0.59877216815948486 * X2)
            + 0.49363401532173157 * np.tanh(-0.94563972949981689 + 0.02181905135512352 * X1 + 0.68701893091201782 * X2)
            - 0.55830740928649902 * np.tanh(-0.83348357677459717 - 0.8212505578994751 * X1 + 0.13336376845836639 * X2)
            - 0.35464167594909668 * np.tanh(0.017041947692632675 - 0.090094991028308868 * X1 + 0.082341447472572327 * X2)
            - 0.54985737800598145 * np.tanh(0.78042000532150269 - 0.43576517701148987 * X1 + 0.068176165223121643 * X2)
            - 0.44777429103851318 * np.tanh(0.83026278018951416 - 0.32804307341575623 * X1 - 1.8717272281646729 * X2)
            - 0.61867767572402954 * np.tanh(1.0298995971679688 - 0.51479923725128174 * X1 + 0.4556383490562439 * X2)
            - 0.13462585210800171 * np.tanh(1.450109601020813 - 1.1933362483978271 * X1 + 0.0029149351175874472 * X2)
            - 1.038992166519165   * np.tanh(1.6685527563095093 - 0.2964826226234436 * X1 + 1.1064096689224243 * X2)
          )
        + 0.31676885485649109 * np.tanh(
            0.29953297972679138 
            + 0.11513504385948181 * np.tanh(-1.4793460369110107 - 0.21052105724811554 * X1 - 0.27372744679450989 * X2)
            - 0.061506006866693497 * np.tanh(-0.98550295829772949 - 0.5785408616065979 * X1 - 0.59877216815948486 * X2)
            + 0.25348550081253052 * np.tanh(-0.94563972949981689 + 0.02181905135512352 * X1 + 0.68701893091201782 * X2)
            - 0.38706371188163757 * np.tanh(-0.83348357677459717 - 0.8212505578994751 * X1 + 0.13336376845836639 * X2)
            - 0.064383916556835175 * np.tanh(0.017041947692632675 - 0.090094991028308868 * X1 + 0.082341447472572327 * X2)
            + 0.10233032703399658 * np.tanh(0.78042000532150269 - 0.43576517701148987 * X1 + 0.068176165223121643 * X2)
            - 0.23956821858882904 * np.tanh(0.83026278018951416 - 0.32804307341575623 * X1 - 1.8717272281646729 * X2)
            + 0.088837295770645142 * np.tanh(1.0298995971679688 - 0.51479923725128174 * X1 + 0.4556383490562439 * X2)
            + 0.36619627475738525 * np.tanh(1.450109601020813 - 1.1933362483978271 * X1 + 0.0029149351175874472 * X2)
            + 0.70937550067901611 * np.tanh(1.6685527563095093 - 0.2964826226234436 * X1 + 1.1064096689224243 * X2)
          )
        + 0.26497375965118408 * np.tanh(
            0.73424834012985229 
            - 0.004535985179245472 * np.tanh(-1.4793460369110107 - 0.21052105724811554 * X1 - 0.27372744679450989 * X2)
            + 1.3651849031448364 * np.tanh(-0.98550295829772949 - 0.5785408616065979 * X1 - 0.59877216815948486 * X2)
            + 1.0212399959564209 * np.tanh(-0.94563972949981689 + 0.02181905135512352 * X1 + 0.68701893091201782 * X2)
            + 1.1655539274215698 * np.tanh(-0.83348357677459717 - 0.8212505578994751 * X1 + 0.13336376845836639 * X2)
            + 0.012068412266671658 * np.tanh(0.017041947692632675 - 0.090094991028308868 * X1 + 0.082341447472572327 * X2)
            + 1.0592633485794067 * np.tanh(0.78042000532150269 - 0.43576517701148987 * X1 + 0.068176165223121643 * X2)
            - 1.0534647703170776 * np.tanh(0.83026278018951416 - 0.32804307341575623 * X1 - 1.8717272281646729 * X2)
            - 0.042276788502931595 * np.tanh(1.0298995971679688 - 0.51479923725128174 * X1 + 0.4556383490562439 * X2)
            - 1.1845817565917969 * np.tanh(1.450109601020813 - 1.1933362483978271 * X1 + 0.0029149351175874472 * X2)
            - 0.022373588755726814 * np.tanh(1.6685527563095093 - 0.2964826226234436 * X1 + 1.1064096689224243 * X2)
          )
        + 0.24966247379779816 * np.tanh(
            0.86275207996368408 
            - 0.079777687788009644 * np.tanh(-1.4793460369110107 - 0.21052105724811554 * X1 - 0.27372744679450989 * X2)
            + 0.15378162264823914 * np.tanh(-0.98550295829772949 - 0.5785408616065979 * X1 - 0.59877216815948486 * X2)
            - 0.74858522415161133 * np.tanh(-0.94563972949981689 + 0.02181905135512352 * X1 + 0.68701893091201782 * X2)
            + 0.71782541275024414 * np.tanh(-0.83348357677459717 - 0.8212505578994751 * X1 + 0.13336376845836639 * X2)
            - 0.41732850670814514 * np.tanh(0.017041947692632675 - 0.090094991028308868 * X1 + 0.082341447472572327 * X2)
            + 0.4468209445476532 * np.tanh(0.78042000532150269 - 0.43576517701148987 * X1 + 0.068176165223121643 * X2)
            - 0.69073379039764404 * np.tanh(0.83026278018951416 - 0.32804307341575623 * X1 - 1.8717272281646729 * X2)
            - 0.13008217513561249 * np.tanh(1.0298995971679688 - 0.51479923725128174 * X1 + 0.4556383490562439 * X2)
            - 0.25244593620300293 * np.tanh(1.450109601020813 - 1.1933362483978271 * X1 + 0.0029149351175874472 * X2)
            - 0.49587270617485046 * np.tanh(1.6685527563095093 - 0.2964826226234436 * X1 + 1.1064096689224243 * X2)
          )
       )

# Parameters
level_c2 = 2.3151
level_c1 = 0.5231
level_w2 = 0.864379
level_w1 = 0.03295
fixed_c1 = 0.5231

heatmap_values = np.full(V_nn.shape, np.nan)

# If V_nn < level_w1, choose quadratid lyapunov function
idx1 = V_nn < level_w1
heatmap_values[idx1] = 1 - V_quadratic[idx1] / level_c2

# If level_w1 <= V_nn < level_w2, do comparison
idx2 = (V_nn >= level_w1) & (V_nn < level_w2)
val1 = 1 - V_quadratic[idx2] / level_c2
val2 = (1 - V_nn[idx2] / level_w2) * (1 - fixed_c1 / level_c2)
heatmap_values[idx2] = np.maximum(val1, val2)

# If V_nn > level_w2，set heatmap value as 0
heatmap_values[V_nn > level_w2] = 0


from matplotlib import rc
plt.rcParams['pdf.fonttype'] = 42
rc('font', **{'family': 'Linux Libertine O'})
plt.rcParams['font.size'] = 24
plt.rcParams['mathtext.fontset'] = 'stix'
# plt.rc('text', usetex=True)
# plt.rc('font', family='serif')

fig, ax = plt.subplots(figsize=(8, 6))
# Plot heatmap
im = ax.imshow(heatmap_values, extent=[x1[0], x1[-1], x2[0], x2[-1]],
               origin='lower', aspect='auto', cmap='jet', vmin=0, vmax=1)

ax.set_xlabel(r'$x_1$', fontsize=30)
ax.set_ylabel(r'$x_2$', fontsize=30)
ax.set_title('Probabilistic ROA Heatmap', fontsize=30)
ax.tick_params(axis='x', labelsize=14)
ax.tick_params(axis='y', labelsize=14)
# cb = fig.colorbar(im, ax=ax, label='Probability of Attraction')
cb = fig.colorbar(im, ax=ax)
cb.set_label('Probability of Attraction', fontsize=30) 
cb.ax.tick_params(labelsize=25) 

# Plot contours
# Contour 1: V_quadratic = level_c1
# cs1 = ax.contour(X1, X2, V_quadratic, levels=[level_c1], colors='w', linewidths=1.5)
# Contour 2: V_quadratic = level_c2
# cs2 = ax.contour(X1, X2, V_quadratic, levels=[level_c2], colors='r', linewidths=1.5)
# Contour 3: V_nn = level_w2
cs3 = ax.contour(X1, X2, V_nn, levels=[level_w2], colors='g', linewidths=1.5)
# Contour 4: V_nn = level_w1
# cs4 = ax.contour(X1, X2, V_nn, levels=[level_w1], colors='k', linewidths=2)

# Extract contour objects for legend purposes
# h1 = cs1.collections[0]
# h2 = cs2.collections[0]
h3 = cs3.collections[0]
# h4 = cs4.collections[0]

import matplotlib.lines as mlines

# Create a proxy artist for the V_NN contour line (green, linewidth=1.5)
line_nn = mlines.Line2D([], [], color='g', linewidth=1.5, label=r'$V_{NN}=0.86437$')

ax.legend(handles=[line_nn], loc='best', fontsize=12)

# ax.grid(True)
plt.tight_layout()
plt.savefig('Probabilistic_ROA_Heatmap.pdf', format='pdf')
plt.show()
